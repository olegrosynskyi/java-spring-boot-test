apply plugin: 'docker-compose'
apply plugin: "com.kenshoo.tasksplugin"
apply plugin: "com.kenshoo.vaultkaplugin"

buildscript {
    ext {
        springBootVersion = '2.5.5'
        dependencyManagementPluginVersion = '1.0.11.RELEASE'
        dockerComposePluginVersion = '0.14.9'
        gradleTasksPluginVersion = '0.1.+'
        vaultkaPluginVersion = '0.1.+'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")
        classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:${dockerComposePluginVersion}"
        classpath "com.kenshoo.tasksplugin:gradle-tasks-plugin:${gradleTasksPluginVersion}"
        classpath "com.kenshoo.vaultkaplugin:vaultka-gradle-plugin:${vaultkaPluginVersion}"
    }
}

apply from: "${rootDir}/dependencies.gradle"
apply from: "${rootDir}/jacoco.settings.gradle"

dockerCompose {
    captureContainersOutputToFiles =  project.file('build/logs/containers/')
    captureContainersOutput = true
    composeLogToFile =  project.file('build/logs/containers/compose.log')
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    def BUILD_NUMBER = project.hasProperty('buildNum') ? "$buildNum" : (System.env.BUILD_NUMBER != null) ? "${System.env.BUILD_NUMBER}" : 'undef'
    group = 'com.skai.template'
    version = '0.1.' + BUILD_NUMBER

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        compileClasspath {
            resolutionStrategy.activateDependencyLocking()
        }
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

task updateLocks(type: GradleBuild) {
    startParameter.setWriteDependencyLocks(true)
    tasks = ['assemble']
}

task dockerBuild(type: Exec){
    commandLine "docker", "build", "-t", "app", "."
}

task publish(type: Wrapper) {

}

task testAll(type: GradleBuild) {
    tasks = ['composeDown', 'clean', 'assemble', 'dockerBuild', 'composeUp', 'check']
}

task copyAppLog(type: Wrapper) {

}

task cleanDocker(type: Exec) {
    commandLine ("docker", "rm", "-f", "app", "app_db", "redis_db", "app_rabbit", "app_mock").setIgnoreExitValue(true)
}



composeDown.dependsOn(populateEnvVarsWithSecrets)
composeUp.dependsOn(populateEnvVarsWithSecrets)